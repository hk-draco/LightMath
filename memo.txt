parseExpr:: [Token] -> Expr
parseExpr ts = parseExpr' ts [] [] where
    -- (input tokens, operation stack, expression queue) -> expression
    parseExpr':: [Token] -> [(Token, Int)] -> [Expr] -> Expr
    parseExpr' [] s q = head $ makeExpr s q
    parseExpr' (x:xs) s q = case x of
        Error t m   -> error "Illegal tokens"
        Number n    -> parseExpr' xs s (NumberExpr n:q)
        Ident i     -> if xs /= [] && head xs == ParenOpen
            then parseExpr' xs ((x, 1):s) q
            else parseExpr' xs s (IdentExpr i:q)
        ParenOpen   -> parseExpr' xs ((x, 0):s) q
        ParenClose  -> parseExpr' xs rest $ makeExpr opes q where
            (opes, _:rest) = span ((/= ParenOpen) . fst) s
        Comma       -> parseExpr' xs rest' $ makeExpr opes q where
            (opes, rest) = span ((/= ParenOpen) . fst) s
            rest'        = apply (isIdent . fst) (fmap (1+)) rest
            isIdent x    = case x of Ident _ -> True; _ -> False
        Symbol ope  -> parseExpr' xs ((x, 2):rest) $ makeExpr opes q where
            (opes, rest) = span (precederEq ope . fst) s
    -- ((operator or function token, argument number), input) -> output
    makeExpr:: [(Token, Int)] -> [Expr] -> [Expr]
    makeExpr [] q = q
    makeExpr ((t, n):os) q = makeExpr os $ FuncExpr t args:rest
        where (args, rest) = (reverse $ take n q, drop n q)
    -- Apply 'f' to a element that satisfy 'cond' for the first time
    apply cond f all = case b of [] -> all; (x:xs) -> a ++ f x:xs
        where (a, b) = span (not <$> cond) all

Rewrite (FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0]) 
(FuncExpr (ExprHead (Symbol "+") 0) [FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0],NumberExpr 0])

FuncExpr (ExprHead (Symbol "+") 0) [FuncExpr (ExprHead (Ident "f") 0) [FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0]],IdentExpr "a"]

Rewrite 
(FuncExpr (ExprHead (Symbol "+") 0) [FuncExpr (ExprHead (Ident "f") 0) [FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0]],IdentExpr "a"]) 
(FuncExpr (ExprHead (Symbol "+") 0) [FuncExpr (ExprHead (Symbol "+") 0) [FuncExpr (ExprHead (Ident "f") 0) [FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0]],IdentExpr "a"],NumberExpr 0])

FuncExpr (ExprHead (Symbol "+") 0) 
[FuncExpr (ExprHead (Ident "f") 0) 
[Rewrite (IdentExpr "a") (FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0])],
Rewrite (IdentExpr "a") (FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0])]

Rewrite 
(FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0]) 
(FuncExpr (ExprHead (Symbol "+") 0) [FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0],NumberExpr 0])

Rewrite 
(FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0]) 
(FuncExpr (ExprHead (Symbol "+") 0) [FuncExpr (ExprHead (Symbol "+") 0) [IdentExpr "a",NumberExpr 0],NumberExpr 0])